{"version":3,"sources":["logo.svg","Component/Signup.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Signup","state","username","password","confirmPassword","handleSubmit","bind","handleChange","event","this","setState","target","name","value","console","log","preventDefault","axios","post","then","response","data","errmsg","redirect","catch","error","className","htmlFor","type","id","placeholder","onChange","onClick","Component","App","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6351cae7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.495d93cc.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Signup extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    };\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit(event) {\r\n\r\n        console.log(\"sign-up handleSubmit, username: \");\r\n        console.log(this.state.username);\r\n        event.preventDefault();\r\n\r\n        axios.post(\"/user/\", {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (!response.data.errmsg) {\r\n                console.log(\"Successfully registed!\");\r\n                this.setState({redirect: \"/login\"})\r\n            } else {\r\n                console.log(\"Username is already existed\");\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"Unable to register\");\r\n            console.log(error)\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            \r\n        <div className=\"SignupForm\">\r\n            <h4>Register Now</h4>\r\n            <form className=\"form-horizontal\">\r\n                <div className=\"form-group\">\r\n                    <div className=\"col1 col-ml-auto\">\r\n                        <label className=\"form-label\" htmlFor=\"username\">Username</label>\r\n                    </div>\r\n                    <div className=\"col-3 col-mr-auto\">\r\n                        <input className=\"form-input\" \r\n                            type=\"text\" \r\n                            id=\"username\" \r\n                            placeholder=\"username\" \r\n                            value={this.state.username} \r\n                            onChange={this.handleChange} \r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <div className=\"col-1 col-ml-auto\">\r\n                        <label className=\"form-label\" htmlFor=\"password\">Password: </label>\r\n                    </div>\r\n                    <div className=\"col-3 col-mr-auto\">\r\n                        <input className=\"form-input\"\r\n                            placeholder=\"password\" \r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <div className=\"col-7\"></div>\r\n                    <button className=\"btn btn-primary col-1 col-mr-auto\"\r\n                        onClick={this.handleSubmit}\r\n                        type=\"submit\">\r\n                        Register\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n};\r\nexport default Signup;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Signup from \"./Component/Signup\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome to React</h2>\n        </div>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n      </div>\n      <Signup>\n        <h1>sing up here</h1>\n      </Signup> \n      </>\n    )\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}